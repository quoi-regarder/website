---
description: Patterns for user profile and authentication management
globs: *.vue,*.ts
alwaysApply: false
---
## Authentication

1. **Auth Store**
```typescript
interface AuthState {
  user: User | null
  token: string | null
  isAuthenticated: boolean
}

interface User {
  id: number
  username: string
  email: string
  firstName?: string
  lastName?: string
}
```

2. **Auth Pages**
   - Login (`/auth/login`)
   - Register (`/auth/signup`)
   - Password Reset (`/auth/reset`)
   - Password Recovery (`/auth/recover`)

3. **Form Validation**
   - Use Zod schemas
   - Provide immediate feedback
   - Handle API errors
   - Show loading states

## Profile Management

1. **Profile Layout**
   - Use tabs for section navigation:
     - Profile Information
     - Movie Watchlist
     - TV Show Watchlist
   - Maintain state in URL query

2. **Profile Sections**
   ```vue
   <UTabs
     v-model="active"
     :items="tabs"
     variant="pill"
     @update:model-value="updateUrl"
   >
     <template #profile>
       <Profile />
     </template>
     <template #movies>
       <ProfileMovie />
     </template>
     <template #series>
       <ProfileSeries />
     </template>
   </UTabs>
   ```

## Media Lists Management

1. **Movies Section**
   - Display watch time statistics
   - Show favorites
   - Manage watchlist
   - Track watched movies

2. **TV Shows Section**
   - Track series progress
   - Show favorites
   - Manage watchlist
   - Display episode tracking

3. **List Components**
   ```vue
   <UCarousel
     v-if="isLoaded && list.length > 0"
     :items="list"
     :ui="{ item: 'basis-1/2 sm:basis-1/3 md:basis-1/4 lg:basis-1/5 xl:basis-1/6' }"
     arrows
     wheel-gestures
   >
     <template #default="{ item }">
       <DetailProfileCard :item="item" :type="type" />
     </template>
   </UCarousel>
   ```

## Data Management

1. **List Loading**
   - Implement pagination
   - Show loading states
   - Handle empty states
   - Provide error feedback

2. **State Updates**
   - Sync with backend
   - Update local state
   - Handle optimistic updates
   - Manage concurrent updates

## Feature Promotion

1. **Promo Component**
   ```vue
   <PopinFeaturePromo
     v-show="showFeaturePromo"
     class="transition-all duration-1000"
   />
   ```

2. **Promo State**
   ```typescript
   interface PromoState {
     hasSeenPromo: boolean
   }
   ```

## Security

1. **Route Protection**
   ```typescript
   definePageMeta({
     middleware: ['auth']
   })
   ```

2. **Token Management**
   - Secure cookie storage
   - Token refresh
   - Session handling
   - Logout cleanup

## Performance

1. **Component Loading**
   - Lazy load list components
   - Use skeleton loaders
   - Implement infinite scroll
   - Cache list data

2. **State Persistence**
   - Use cookie storage
   - Set appropriate expiration
   - Handle storage limits
   - Clear on logout

## Error Handling

1. **API Errors**
   - Show user-friendly messages
   - Provide retry options
   - Log errors appropriately
   - Handle offline state

2. **Form Errors**
   - Validate input
   - Show field errors
   - Provide form-level errors
   - Handle submission errors
