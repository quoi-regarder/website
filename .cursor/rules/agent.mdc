---
description: Styles and conventions used in our Vue/Nuxt application
globs: 
alwaysApply: false
---
## **TypeScript and Code Structure**

- Write concise TypeScript code, favoring functional and declarative programming.
- Avoid classes unless necessary (e.g., complex model management).
- Use descriptive variable names with auxiliary verbs (`isLoading`, `hasError`).
- Structure files as follows:
  - **Main Component**: The exported Vue file.
  - **Subcomponents**: Internal components when needed.
  - **Composables (`composables/`)**: Reusable logic.
  - **Utilities (`utils/`)**: Helpers and data processing.
  - **Types (`types/`)**: TypeScript definitions for strict typing.

## **Syntax and Formatting**

- Use concise syntax for conditionals (`v-if="isVisible"` instead of ternary expressions in templates).
- Prefer **composables** (`useFeature()`) over mixins.
- Avoid deeply nested directives; prioritize readability and modularity.

## **TypeScript Usage**

- Use TypeScript for all `.ts` and `.vue` files.
- Prefer `type` over `interface`, except for complex objects.
- Avoid `enum`; use **mapping objects (`Record<string, string>`)** instead.
- Always explicitly type `props`, `emits`, and function returns.

## **UI and Styling**

- Use **NuxtUI**, **Radix**, and **Tailwind CSS** for UI and styling.
- Follow a **mobile-first approach** using Tailwind's responsive classes (`sm:`, `md:`, `lg:`).
- Use Tailwind classes directly in templates instead of external CSS.
- Maintain **optimal accessibility** (`aria-*`, `tabindex`, `@vue-a11y`).

## **Performance Optimization**

- Minimize the use of **client-only components** (`client:only`).
- Use `defineNuxtComponent()` and `defineProps()` for optimized component handling.
- **Lazy-load** non-critical components with `defineAsyncComponent()`.
- Dynamically load images and prefer **WebP format**.
- Prioritize **Nuxt Server API (`server/api/`)** for backend requests.

## **Database Querying and Data Modeling**

- Use **AdonisJS with QueryBuilder** for PostgreSQL interactions.
- Group API logic into **service composables** (`composables/service/useMoviesService.ts`).
- Store model types in `models/` and `types/`.

## **Key Conventions**

- Use **VueUse** for advanced state management (`useIntersectionObserver`, `useFetch`, etc.).
- Prefer **Pinia** for global state management with persistent storage via cookies.
- Follow **Nuxt SSR best practices** (`useAsyncData`, `useLazyFetch`) to minimize unnecessary hydration.
- Minimize the use of **refs**, favoring `reactive()` and `computed()` instead.
