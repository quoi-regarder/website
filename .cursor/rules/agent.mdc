---
description: Styles and conventions used in our Vue/Nuxt application
globs: 
alwaysApply: false
---
## **Project Structure**

- **Components Organization**:
  - `components/common/`: Shared components
  - `components/media/`: Media-related components
  - `components/user/`: User-related components
  - `components/layout/`: Layout components
  - `components/field/`: Form field components
  - `components/detail/`: Detail view components
  - `components/home/`: Home page components
  - `components/navbar/`: Navigation components
  - `components/profile/`: Profile-related components
  - `components/popin/`: Popup/modal components

- **Pages Structure**:
  - `pages/auth/`: Authentication pages
  - `pages/profile/`: User profile pages
  - `pages/movie/`: Movie detail pages
  - `pages/tv/`: TV show detail pages
  - `pages/collection/`: Collection pages
  - `pages/regulation/`: Legal and policy pages
  - `pages/[...slug].vue`: Content pages (using Nuxt Content)

## **State Management**

- Use **Pinia** for global state management:
  - Persist state using cookies with expiration and security options
  - Store modules:
    - `useAuthStore`: Authentication state
    - `useMovieListStore`: Movie watchlist state
    - `useSerieListStore`: TV series watchlist state
    - `useFiltersStore`: Search filters state
    - `useFeaturePromoStore`: Feature promotion state

## **Component Patterns**

- Use **Composition API** with `<script setup lang="ts">`
- Component naming:
  - Prefix with feature area (e.g., `HomeHeader`, `ProfileMovie`)
  - Use PascalCase for component names
  - Use kebab-case for file names
- Props and emits:
  - Always type props and emits
  - Use `defineProps` and `defineEmits`
  - Provide default values when appropriate

## **UI and Styling**

- Use **NuxtUI** components with consistent styling:
  - `UContainer` for layout containers
  - `UButton` for actions
  - `UForm` for forms
  - `UTabs` for tabbed interfaces
  - `UCarousel` for media galleries
  - `USkeleton` for loading states
- **Tailwind CSS** conventions:
  - Use semantic color variables (`primary-400`, `secondary-400`)
  - Follow mobile-first responsive design
  - Use consistent spacing units
  - Prefer flex and grid layouts
  - Use opacity modifiers (`bg-white/50`)
  - Use gap utilities instead of margin/padding when possible

## **Internationalization**

- Use **Nuxt I18n** for translations:
  - Support English and French
  - Organize translations by feature
  - Use translation keys for all text content
  - Handle date formatting with locale support
  - SEO meta translations

## **API Integration**

- Use **TMDB API** for movie/TV data:
  - Implement proper error handling
  - Type API responses
  - Cache responses when appropriate
- Use **Spring Boot backend** for:
  - User authentication
  - Watchlist management
  - User preferences
  - Progress tracking

## **Performance Optimization**

- Use **Nuxt Image** for optimized images:
  - Proper sizing and formats
  - Lazy loading
  - Placeholder skeletons
- Component optimization:
  - Lazy load non-critical components
  - Use client-only when necessary
  - Implement proper loading states
- SEO optimization:
  - Use `useSeoMeta` for meta tags
  - Implement proper schemas with `useSchemaOrg`
  - Handle multilingual SEO

## **Error Handling**

- Implement consistent error handling:
  - User-friendly error messages
  - Proper API error handling
  - Form validation feedback
  - Loading states
  - Fallback content

## **Security**

- Follow security best practices:
  - Secure cookie usage
  - HTTPS enforcement
  - Input sanitization
  - Rate limiting
  - Token management
  - XSS prevention