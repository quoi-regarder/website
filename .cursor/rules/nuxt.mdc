---
description: ENFORE usage of nuxt
globs: **/*
alwaysApply: false
---
## Context

We use **Nuxt 3** as our framework, leveraging its features for optimal performance and developer experience.

## Core Features

1. **Auto Imports**
   - Components are auto-imported from the `components/` directory
   - Composables are auto-imported from the `composables/` directory
   - Utils are auto-imported from the `utils/` directory
   - Store modules are auto-imported from the `stores/` directory

2. **File-Based Routing**
   - Pages are automatically routed from the `pages/` directory
   - Dynamic routes use square brackets (`[param]`)
   - Catch-all routes use `[...slug]`
   - Nested routes follow directory structure

3. **Layouts**
   - Default layout in `layouts/default.vue`
   - Auth layout in `layouts/auth.vue`
   - Filter layout in `layouts/filter.vue`

4. **Middleware**
   - Auth middleware for protected routes
   - Maintenance middleware for site status
   - Redirect middleware for language handling

## Modules Integration

1. **Nuxt Content**
   - Used for static pages and documentation
   - Markdown support with frontmatter
   - Content directory structure matches routes

2. **Nuxt Image**
   - Automatic image optimization
   - Responsive image handling
   - TMDB image URL processing

3. **Nuxt I18n**
   - Multi-language support (English/French)
   - Auto-route generation
   - SEO optimization for languages

4. **Nuxt UI**
   - Component library integration
   - Theme customization
   - Dark mode support

## State Management

1. **Pinia Integration**
   - Store auto-imports
   - Cookie persistence
   - Type safety

2. **Server State**
   - `useAsyncData` for data fetching
   - `useFetch` for API calls
   - Error handling

## SEO and Meta

1. **Head Management**
   - `useHead` for dynamic meta tags
   - `useSeoMeta` for SEO optimization
   - `useSchemaOrg` for structured data

2. **Image Optimization**
   - Automatic WebP conversion
   - Responsive sizes
   - Lazy loading

## Performance

1. **Code Splitting**
   - Automatic chunk splitting
   - Dynamic imports
   - Route-based code splitting

2. **Caching**
   - Component caching
   - API response caching
   - Static generation where appropriate

## Development Practices

1. **TypeScript**
   - Strict type checking
   - Type inference
   - Component type safety

2. **Error Handling**
   - Custom error pages
   - API error management
   - Validation errors

3. **Testing**
   - Component testing setup
   - API testing
   - E2E testing configuration