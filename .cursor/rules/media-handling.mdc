---
description: Patterns for handling movies and TV shows data
globs: *.vue
alwaysApply: false
---
## Image Handling

1. **TMDB Image URLs**
   - Use `getImageUrl` utility for all TMDB images
   - Available sizes: 'w300', 'w500', 'original'
   - Always provide fallback for null paths
   ```vue
   <NuxtImg
     v-if="posterPath"
     :src="getImageUrl(posterPath, 'w300')"
     :alt="title"
   />
   <USkeleton v-else class="w-[150px] h-[225px]" />
   ```

## Media Display Components

1. **Cards**
   - Use `DetailProfileCard` for watchlist/favorites
   - Use `MediaCard` for search results
   - Include essential info: title, release date, rating

2. **Detail Pages**
   - Show full metadata
   - Include provider information
   - Show trailers when available
   - Display cast and crew
   - Show collection if applicable

## Watch Status Management

1. **Movies**
   ```typescript
   enum WatchStatus {
     TO_WATCH = 'TO_WATCH',
     WATCHED = 'WATCHED'
   }
   ```

2. **TV Shows**
   ```typescript
   enum WatchStatus {
     TO_WATCH = 'TO_WATCH',
     WATCHING = 'WATCHING',
     WATCHED = 'WATCHED'
   }
   ```

3. **Progress Tracking**
   - Track individual episodes
   - Calculate series completion percentage
   - Update status automatically

## User Interactions

1. **Watchlist Management**
   - Add/Remove from watchlist
   - Update watch status
   - Track watch date

2. **Favorites**
   - Toggle favorite status
   - Store in user preferences
   - Sync with backend

3. **Ratings and Reviews**
   - Display TMDB ratings
   - Show vote count
   - Format numbers appropriately

## Performance Optimization

1. **Data Loading**
   - Use skeleton loaders during fetch
   - Implement infinite scroll for lists
   - Cache responses when appropriate

2. **Image Loading**
   - Lazy load images
   - Use appropriate sizes
   - Provide loading placeholders

3. **State Management**
   - Use dedicated stores for lists
   - Persist watch status
   - Handle offline capabilities
