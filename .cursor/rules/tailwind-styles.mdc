---
description: ENFORE usage of Tailwind CSS
globs: *.vue, *.css
alwaysApply: false
---
## Layout Patterns

1. **Flex Layouts**
   - Use `flex flex-col` for vertical stacking
   - Use `flex items-center` for vertical alignment
   - Use `flex justify-center` for horizontal alignment
   - Use `gap-x-{n}` and `gap-y-{n}` instead of margins
   - Use `flex-1` for flexible spacing

2. **Grid Layouts**
   - Use `grid grid-cols-{n}` for column layouts
   - Use `gap-{n}` for grid spacing
   - Use responsive variants for adaptive layouts

3. **Container and Spacing**
   - Use `UContainer` for page-level containment
   - Use consistent spacing units (4, 8, 12, 16, etc.)
   - Use `p-{n}` for padding
   - Use `my-{n}` and `mx-{n}` for margin when necessary

## Styling Best Practices

1. **Background and Colors**
   - Use `bg-white/50` instead of `bg-white bg-opacity-50`
   - Use semantic color classes (`primary-400`, `secondary-400`)
   - Use `text-{color}` for text colors
   - Use `dark:` variant for dark mode

2. **Responsive Design**
   - Use mobile-first approach
   - Use breakpoint prefixes consistently:
     - `sm:` (640px)
     - `md:` (768px)
     - `lg:` (1024px)
     - `xl:` (1280px)
     - `2xl:` (1536px)

3. **Typography**
   - Use semantic text sizes:
     - `text-sm` for small text
     - `text-base` for normal text
     - `text-lg` for larger text
     - `text-xl` and above for headings
   - Use `font-{weight}` for font weights
   - Use `text-center` for alignment

4. **Shadows and Effects**
   - Use `shadow-lg` for elevated elements
   - Use `rounded-{size}` for consistent border radius
   - Use `backdrop-blur-md` for glass effects

## Component-Specific Patterns

1. **Cards and Containers**
   ```html
   <div class="bg-[var(--ui-bg-elevated)] dark:bg-[var(--ui-bg-muted)] rounded-lg shadow-lg p-4">
   ```

2. **Buttons and Interactive Elements**
   ```html
   <button class="flex items-center gap-x-2 px-4 py-2 rounded-lg bg-primary-400 hover:bg-primary-500">
   ```

3. **Form Fields**
   ```html
   <div class="flex flex-col gap-y-2">
     <label class="text-sm font-medium">
     <input class="w-full rounded-lg border border-gray-200">
   </div>
   ```

4. **Lists and Grids**
   ```html
   <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
   ```

## Animation and Transitions

1. **Transitions**
   - Use `transition-all` for smooth changes
   - Use `duration-{time}` for timing
   - Use `ease-in-out` for smooth easing

2. **Transforms**
   - Use `transform` with specific transforms
   - Use `scale-` for scaling effects
   - Use `translate-` for movement

3. **Animations**
   - Use `animate-` prefix for keyframe animations
   - Define custom animations in CSS when needed

## Performance Considerations

1. **Class Organization**
   - Group related classes together
   - Order from layout to visual styles
   - Use consistent class ordering across components

2. **Responsive Classes**
   - Only use responsive variants when necessary
   - Group responsive variants together
   - Consider mobile performance

3. **Custom Utilities**
   - Define custom utilities in `tailwind.config.js`
   - Use semantic class names
   - Document custom utilities
